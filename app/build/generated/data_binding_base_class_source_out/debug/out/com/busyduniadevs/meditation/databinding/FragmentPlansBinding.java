// Generated by view binder compiler. Do not edit!
package com.busyduniadevs.meditation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.busyduniadevs.meditation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPlansBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout diet;

  @NonNull
  public final HorizontalScrollView horizontalScrollView;

  @NonNull
  public final LinearLayout imageContainerPlans;

  @NonNull
  public final LinearLayout meal;

  @NonNull
  public final LinearLayout water;

  private FragmentPlansBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout diet,
      @NonNull HorizontalScrollView horizontalScrollView, @NonNull LinearLayout imageContainerPlans,
      @NonNull LinearLayout meal, @NonNull LinearLayout water) {
    this.rootView = rootView;
    this.diet = diet;
    this.horizontalScrollView = horizontalScrollView;
    this.imageContainerPlans = imageContainerPlans;
    this.meal = meal;
    this.water = water;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPlansBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPlansBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_plans, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPlansBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.diet;
      LinearLayout diet = ViewBindings.findChildViewById(rootView, id);
      if (diet == null) {
        break missingId;
      }

      id = R.id.horizontalScrollView;
      HorizontalScrollView horizontalScrollView = ViewBindings.findChildViewById(rootView, id);
      if (horizontalScrollView == null) {
        break missingId;
      }

      id = R.id.imageContainerPlans;
      LinearLayout imageContainerPlans = ViewBindings.findChildViewById(rootView, id);
      if (imageContainerPlans == null) {
        break missingId;
      }

      id = R.id.meal;
      LinearLayout meal = ViewBindings.findChildViewById(rootView, id);
      if (meal == null) {
        break missingId;
      }

      id = R.id.water;
      LinearLayout water = ViewBindings.findChildViewById(rootView, id);
      if (water == null) {
        break missingId;
      }

      return new FragmentPlansBinding((LinearLayout) rootView, diet, horizontalScrollView,
          imageContainerPlans, meal, water);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
